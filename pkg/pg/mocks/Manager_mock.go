// Code generated by mockery v2.42.0. DO NOT EDIT.

package pg_mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, callback
func (_m *MockManager) Do(ctx context.Context, callback func(context.Context) error) error {
	ret := _m.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockManager_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - callback func(context.Context) error
func (_e *MockManager_Expecter) Do(ctx interface{}, callback interface{}) *MockManager_Do_Call {
	return &MockManager_Do_Call{Call: _e.mock.On("Do", ctx, callback)}
}

func (_c *MockManager_Do_Call) Run(run func(ctx context.Context, callback func(context.Context) error)) *MockManager_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockManager_Do_Call) Return(_a0 error) *MockManager_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Do_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockManager_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
